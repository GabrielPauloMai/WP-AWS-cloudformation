AWSTemplateFormatVersion: 2010-09-09

Parameters:
  DesiredCapacity:
    Type: Number
    Default: "1"
    Description: Number of instances to launch in your ECS cluster.
  MyVPC:
    Type: AWS::EC2::VPC::Id
    Description: Select the VPC where you want to deploy your ECS cluster.
  PublicSubnet1:
    Type: AWS::EC2::Subnet::Id
    Description: Select the public subnet where you want to deploy your ECS cluster.
  PublicSubnet2:
    Type: AWS::EC2::Subnet::Id
    Description: Select the public subnet where you want to deploy your ECS cluster.
  

Mappings:
  AWSRegionToAMI:
    us-east-1:
      AMIID: ami-09bee01cc997a78a6
    us-east-2:
      AMIID: ami-0a9e12068cb98a01d
    us-west-1:
      AMIID: ami-0fa6c8d131a220017
    us-west-2:
      AMIID: ami-078c97cf1cefd1b38
    eu-west-1:
      AMIID: ami-0c9ef930279337028
    eu-central-1:
      AMIID: ami-065c1e34da68f2b02
    ap-northeast-1:
      AMIID: ami-02265963d1614d04d
    ap-southeast-1:
      AMIID: ami-0b68661b29b9e058c
    ap-southeast-2:
      AMIID: ami-00e4b147599c13588

Resources:

  #####EFS########
  # Definição do sistema de arquivos EFS
  EFSFileSystem:
    Type: AWS::EFS::FileSystem
  
    # Grupo de segurança para controlar o tráfego no ponto de montagem EFS
  MountTargetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName}-EFS
      GroupDescription: Grupo de seguranca para ponto de montagem EFS
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !Ref EcsSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EFS
      VpcId: !Ref MyVPC

  # Ponto de montagem 1 do EFS em uma subnet específica
  EFSMountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SubnetId: !Ref PublicSubnet1
      SecurityGroups:
        - !Ref MountTargetSecurityGroup

  # Ponto de montagem 2 do EFS em outra subnet
  EFSMountTarget2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SubnetId: !Ref PublicSubnet2
      SecurityGroups:
        - !Ref MountTargetSecurityGroup

    # Ponto de acesso EFS para facilitar o acesso ao sistema de arquivos
  EFSAccessPoint:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref EFSFileSystem

  #####ECS########
  # Definição do cluster ECS
  ECSCluster:
    Type: 'AWS::ECS::Cluster'

  # Grupo de segurança ECS
  EcsSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: ECS Security Group
      VpcId: !Ref MyVPC  # Referência à sua VPC

  # Regra de entrada HTTP no grupo de segurança ECS
  EcsSecurityGroupHTTPinbound:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref EcsSecurityGroup  # Referência ao grupo de segurança ECS
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0  # Permite tráfego HTTP de qualquer lugar

  # Regra de entrada SSH no grupo de segurança ECS
  EcsSecurityGroupSSHinbound:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref EcsSecurityGroup  # Referência ao grupo de segurança ECS
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: 0.0.0.0/0  # Permite tráfego SSH de qualquer lugar

  # Regra de entrada para portas ALB no grupo de segurança ECS
  EcsSecurityGroupALBports:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref EcsSecurityGroup  # Referência ao grupo de segurança ECS
      IpProtocol: tcp
      FromPort: 31000
      ToPort: 61000
      SourceSecurityGroupId: !Ref EcsSecurityGroup  # Permite tráfego de/para o próprio grupo de segurança ECS

  #####CloudWatch########
  CloudWatchLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Join
        - ""
        - - ECSLogGroup
          - !Ref "AWS::StackName"
      RetentionInDays: 7

  #####Task########
  # Definição da tarefa ECS
  ECSTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      Family: !Join
        - ""
        - - !Ref "AWS::StackName"
          - "-ecs"
      ContainerDefinitions:
        - Name: wordpress
          Cpu: "10" 
          Essential: "true" 
          Image: 'wordpress:latest' 
          Memory: '300'  
          LogConfiguration: 
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogGroup  # Grupo de logs do CloudWatch
              awslogs-region: !Ref 'AWS::Region'  
              awslogs-stream-prefix: wordpress  
          PortMappings:
            - ContainerPort: 80 
              Protocol: tcp  # Protocolo de rede
          MountPoints:
            - ContainerPath: /var/www/html  # Caminho dentro do contêiner
              SourceVolume: EFSVolume  
              ReadOnly: false 
      Volumes:
        - Name: EFSVolume  
          EFSVolumeConfiguration:
            FilesystemId: !Ref EFSFileSystem  
            AuthorizationConfig:
              AccessPointId: !Ref EFSAccessPoint  
              IAM: DISABLED 
            TransitEncryption: ENABLED  # Criptografia de trânsito habilitada
  #####Elasctic Load Balancer########
  ECSALB:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: ECSALB  
      Scheme: internet-facing  # Esquema de rede
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: "30"  # Tempo limite de ociosidade em segundos
      Subnets:
        - !Ref PublicSubnet1  
        - !Ref PublicSubnet2  
      SecurityGroups:
        - !Ref EcsSecurityGroup  

  # Listener para o Application Load Balancer
  ALBListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    DependsOn: ECSServiceRole 
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ECSTG 
      LoadBalancerArn: !Ref ECSALB  
      Port: 80  
      Protocol: HTTP  

  # Regra de roteamento para o listener Apllication Load Balancer
  ECSALBListenerRule:
    Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
    DependsOn: ALBListener  
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ECSTG  
      Conditions:
        - Field: path-pattern  
          Values:
            - /  
      ListenerArn: !Ref ALBListener  
      Priority: 1  

  #####Elasctic Load Balancer Target Group########
  ECSTG: 
    DependsOn: ECSALB
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 10 # Intervalo entre verificações de integridade
      HealthCheckPath: /
      HealthCheckProtocol: HTTP # Protocolo de verificação de integridade
      Matcher:
        HttpCode: 200-299,302 # Códigos de resposta válidos
      HealthCheckTimeoutSeconds: 5 # Tempo limite de verificação de integridade
      HealthyThresholdCount: 2 # Número de verificações de integridade consecutivas bem-sucedidas
      Name: ECSTG 
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref MyVPC
  
  #####Auto Scaling########
  ECSAutoScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup" 
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      LaunchConfigurationName: !Ref ECSLaunchConfiguration
      MinSize: 1  # Número mínimo de instâncias
      MaxSize: 5
      DesiredCapacity: !Ref DesiredCapacity # Número desejado de instâncias
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M # Tempo limite para criação da instância
    UpdatePolicy:
      AutoScalingRollingUpdate:
        WillReplace: true # Substitui as instâncias antigas por novas

  # Configuração de inicialização do EC2
  ECSLaunchConfiguration:
    Type: "AWS::AutoScaling::LaunchConfiguration" 
    Properties:
      ImageId: !FindInMap [AWSRegionToAMI, !Ref "AWS::Region", AMIID] # AMI do EC2
      SecurityGroups:
        - !Ref EcsSecurityGroup
      InstanceType: t2.micro # Tipo de instância
      IamInstanceProfile: !Ref EC2InstanceProfile 
      UserData: !Base64
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -xe
            - echo ECS_CLUSTER=
            - !Ref ECSCluster
            - |2
              >> /etc/ecs/ecs.config
            - |
              yum install -y aws-cfn-bootstrap
            - '/opt/aws/bin/cfn-signal -e $? '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource ECSAutoScalingGroup '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

  # Definição do serviço ECS
  Service:
    Type: "AWS::ECS::Service" 
    DependsOn: ALBListener
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 1 # Número desejado de instâncias
      LoadBalancers:
        - ContainerName: wordpress
          ContainerPort: 80
          TargetGroupArn: !Ref ECSTG
      Role: !Ref ECSServiceRole
      TaskDefinition: !Ref ECSTaskDefinition 

  #Role para o serviço ECS
  ECSServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "elasticloadbalancing:DeregisterInstancesFromLoadBalancer"
                  - "elasticloadbalancing:DeregisterTargets"
                  - "elasticloadbalancing:Describe*"
                  - "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
                  - "elasticloadbalancing:RegisterTargets"
                  - "ec2:Describe*"
                  - "ec2:AuthorizeSecurityGroupIngress"
                Resource: "*"

  #Target ECS
  ServiceScalingTarget:
    Type: "AWS::ApplicationAutoScaling::ScalableTarget"
    DependsOn: Service
    Properties:
      MaxCapacity: 5 
      MinCapacity: 1
      ResourceId: !Join 
        - ""
        - - service/
          - !Ref ECSCluster
          - /
          - !GetAtt
            - Service
            - Name
      RoleARN: !GetAtt
        - AutoscalingRole
        - Arn
      ScalableDimension: "ecs:service:DesiredCount" 
      ServiceNamespace: ecs 
  
  #Policy ECS
  ServiceScalingPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy" 
    Properties:
      PolicyName: AStepPolicy 
      PolicyType: StepScaling
      ScalingTargetId: !Ref ServiceScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 60 # Tempo de espera entre as ações de escalonamento
        MetricAggregationType: Average 
        StepAdjustments:
          - MetricIntervalLowerBound: 0 
            ScalingAdjustment: 200 # Aumenta a capacidade em 200%
  
  #Alarm ECS
  ALB500sAlarmScaleUp:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      EvaluationPeriods: '1' # Número de períodos de avaliação
      Statistic: Average
      Threshold: '10' # Limite de alarme
      AlarmDescription: Alarm if our ALB generates too many HTTP 500s. 
      Period: '60'
      AlarmActions:
        - !Ref ServiceScalingPolicy
      Namespace: AWS/ApplicationELB
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt
            - ECSALB
            - LoadBalancerFullName
      ComparisonOperator: GreaterThanThreshold
      MetricName: HTTPCode_ELB_5XX_Count

  #Role para o EC2
  EC2Role:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                  - 'ecs:CreateCluster'
                  - 'ecs:DeregisterContainerInstance'
                  - 'ecs:DiscoverPollEndpoint'
                  - 'ecs:Poll'
                  - 'ecs:RegisterContainerInstance'
                  - 'ecs:StartTelemetrySession'
                  - 'ecs:Submit*'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: "*"

  #Role para o Auto Scaling
  AutoscalingRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: service-autoscaling
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "application-autoscaling:*"
                  - "cloudwatch:DescribeAlarms"
                  - "cloudwatch:PutMetricAlarm"
                  - "ecs:DescribeServices"
                  - "ecs:UpdateService"
                Resource: "*"

  #Profile para o EC2
  EC2InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: /
      Roles:
        - !Ref EC2Role
        
#Saidas da stack
Outputs:
  ECSALBOuput:
    Value: !Join
      - ""
      - - "http://"
        - !GetAtt
          - ECSALB
          - DNSName