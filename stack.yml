AWSTemplateFormatVersion: 2010-09-09

Parameters:
  DesiredCapacity:
    Type: Number
    Default: "1"
    Description: Number of instances to launch in your ECS cluster.
  MyVPC:
    Type: AWS::EC2::VPC::Id
    Description: Select the VPC where you want to deploy your ECS cluster.
  PublicSubnet1:
    Type: AWS::EC2::Subnet::Id
    Description: Select the public subnet where you want to deploy your ECS cluster.
  PublicSubnet2:
    Type: AWS::EC2::Subnet::Id
    Description: Select the public subnet where you want to deploy your ECS cluster.
  

Mappings:
  AWSRegionToAMI:
    us-east-1:
      AMIID: ami-09bee01cc997a78a6
    us-east-2:
      AMIID: ami-0a9e12068cb98a01d
    us-west-1:
      AMIID: ami-0fa6c8d131a220017
    us-west-2:
      AMIID: ami-078c97cf1cefd1b38
    eu-west-1:
      AMIID: ami-0c9ef930279337028
    eu-central-1:
      AMIID: ami-065c1e34da68f2b02
    ap-northeast-1:
      AMIID: ami-02265963d1614d04d
    ap-southeast-1:
      AMIID: ami-0b68661b29b9e058c
    ap-southeast-2:
      AMIID: ami-00e4b147599c13588

Resources:

  #####VPC########

  #   Definição da VPC (Virtual Private Cloud)
  # MyVPC:
  #   Type: "AWS::EC2::VPC"
  #   Properties:
  #     EnableDnsSupport: true     # Habilita suporte a DNS na VPC
  #     EnableDnsHostnames: true   # Habilita a atribuição automática de nomes de host DNS

  # Gateway de Internet para permitir conectividade com a Internet
  # InternetGateway:
  #   Type: "AWS::EC2::InternetGateway"

  # # Anexa o Gateway de Internet à VPC
  # AttachGateway:
  #   Type: "AWS::EC2::VPCGatewayAttachment"
  #   Properties:
  #     VpcId: !Ref MyVPC
  #     InternetGatewayId: !Ref InternetGateway

  # Sub-rede pública 1 na Zona de Disponibilidade 'us-east-1a'
  # PublicSubnet1:
  #   Type: AWS::EC2::Subnet
  #   Properties:
  #     VpcId: !Ref MyVPC
  #     CidrBlock: "10.0.0.0/24"   # Define o bloco de endereços IP da sub-rede
  #     AvailabilityZone: "us-east-1a"  # Especifica a Zona de Disponibilidade

  # # Sub-rede pública 2 na Zona de Disponibilidade 'us-east-1b'
  # PublicSubnet2:
  #   Type: AWS::EC2::Subnet
  #   Properties:
  #     VpcId: !Ref MyVPC
  #     CidrBlock: "10.0.1.0/24"   # Define o bloco de endereços IP da sub-rede
  #     AvailabilityZone: "us-east-1b"  # Especifica a Zona de Disponibilidade


  #####EFS########
  # Definição do sistema de arquivos EFS
  EFSFileSystem:
    Type: AWS::EFS::FileSystem
  
    # Grupo de segurança para controlar o tráfego no ponto de montagem EFS
  MountTargetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName}-EFS
      GroupDescription: Grupo de seguranca para ponto de montagem EFS
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !Ref EcsSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EFS
      VpcId: !Ref MyVPC

  # Ponto de montagem 1 do EFS em uma subnet específica
  EFSMountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SubnetId: !Ref PublicSubnet1
      SecurityGroups:
        - !Ref MountTargetSecurityGroup

  # Ponto de montagem 2 do EFS em outra subnet
  EFSMountTarget2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SubnetId: !Ref PublicSubnet2
      SecurityGroups:
        - !Ref MountTargetSecurityGroup

    # Ponto de acesso EFS para facilitar o acesso ao sistema de arquivos
  EFSAccessPoint:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref EFSFileSystem

  #####ECS########
  # Definição do cluster ECS
  ECSCluster:
    Type: 'AWS::ECS::Cluster'

  # Grupo de segurança ECS
  EcsSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: ECS Security Group
      VpcId: !Ref MyVPC  # Referência à sua VPC

  # Regra de entrada HTTP no grupo de segurança ECS
  EcsSecurityGroupHTTPinbound:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref EcsSecurityGroup  # Referência ao seu grupo de segurança ECS
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0  # Permite tráfego HTTP de qualquer lugar (não recomendado para produção)

  # Regra de entrada SSH no grupo de segurança ECS
  EcsSecurityGroupSSHinbound:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref EcsSecurityGroup  # Referência ao seu grupo de segurança ECS
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: 0.0.0.0/0  # Permite tráfego SSH de qualquer lugar (não recomendado para produção)

  # Regra de entrada para portas ALB no grupo de segurança ECS
  EcsSecurityGroupALBports:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref EcsSecurityGroup  # Referência ao seu grupo de segurança ECS
      IpProtocol: tcp
      FromPort: 31000
      ToPort: 61000
      SourceSecurityGroupId: !Ref EcsSecurityGroup  # Permite tráfego de/para o próprio grupo de segurança ECS

  #####CloudWatch########
  CloudWatchLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Join
        - ""
        - - ECSLogGroup
          - !Ref "AWS::StackName"
      RetentionInDays: 7

  #####Task########
  # Definição da tarefa ECS
  ECSTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      Family: !Join
        - ""
        - - !Ref "AWS::StackName"
          - "-ecs"
      ContainerDefinitions:
        - Name: wordpress
          Cpu: "10"  # Unidades de CPU alocadas
          Essential: "true"  # Essencial para a tarefa
          Image: 'wordpress:latest'  # Imagem Docker a ser usada
          Memory: '300'  # Tamanho da memória alocada
          LogConfiguration:  # Configuração de registro
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogGroup  # Grupo de logs do CloudWatch
              awslogs-region: !Ref 'AWS::Region'  # Região do AWS CloudWatch
              awslogs-stream-prefix: wordpress  # Prefixo do fluxo de logs
          PortMappings:
            - ContainerPort: 80  # Porta do contêiner
              Protocol: tcp  # Protocolo de rede
          MountPoints:
            - ContainerPath: /var/www/html  # Caminho dentro do contêiner
              SourceVolume: EFSVolume  # Volume fonte
              ReadOnly: false  # Montagem somente leitura (true/false)
      Volumes:
        - Name: EFSVolume  # Nome do volume
          EFSVolumeConfiguration:
            FilesystemId: !Ref EFSFileSystem  # ID do sistema de arquivos EFS
            AuthorizationConfig:
              AccessPointId: !Ref EFSAccessPoint  # ID do ponto de acesso EFS
              IAM: DISABLED  # IAM habilitado para autorização
            TransitEncryption: ENABLED  # Criptografia de trânsito habilitada
  #####Elasctic Load Balancer########
  ECSALB:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: ECSALB  # Nome do balanceador de carga
      Scheme: internet-facing  # Esquema de rede para acesso público
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: "30"  # Tempo limite de ociosidade em segundos
      Subnets:
        - !Ref PublicSubnet1  # Sub-rede 1 para balanceamento de carga
        - !Ref PublicSubnet2  # Sub-rede 2 para balanceamento de carga
      SecurityGroups:
        - !Ref EcsSecurityGroup  # Grupo de segurança associado

  ALBListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    DependsOn: ECSServiceRole  # Aguarda a criação do papel ECSServiceRole
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ECSTG  # Encaminha o tráfego para o grupo de destino ECSTG
      LoadBalancerArn: !Ref ECSALB  # Associa o ouvinte ao balanceador de carga ECSALB
      Port: 80  # Porta que o ouvinte escuta
      Protocol: HTTP  # Protocolo HTTP utilizado

  ECSALBListenerRule:
    Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
    DependsOn: ALBListener  # Aguarda a criação do ouvinte ALBListener
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ECSTG  # Encaminha o tráfego para o grupo de destino ECSTG
      Conditions:
        - Field: path-pattern  # Condição baseada no padrão do caminho
          Values:
            - /  # Define o padrão do caminho como "/"
      ListenerArn: !Ref ALBListener  # Associa a regra ao ouvinte ALBListener
      Priority: 1  # Prioridade da regra no ouvinte

  ECSTG:
    DependsOn: ECSALB
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      Matcher:
        HttpCode: 200-299,302
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: ECSTG
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref MyVPC
    
  ECSAutoScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      LaunchConfigurationName: !Ref ECSLaunchConfiguration
      MinSize: 1
      MaxSize: 5
      DesiredCapacity: !Ref DesiredCapacity
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        WillReplace: true

  ECSLaunchConfiguration:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
      ImageId: !FindInMap [AWSRegionToAMI, !Ref "AWS::Region", AMIID]
      SecurityGroups:
        - !Ref EcsSecurityGroup
      InstanceType: t2.micro
      IamInstanceProfile: !Ref EC2InstanceProfile
      UserData: !Base64
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -xe
            - echo ECS_CLUSTER=
            - !Ref ECSCluster
            - |2
              >> /etc/ecs/ecs.config
            - |
              yum install -y aws-cfn-bootstrap
            - '/opt/aws/bin/cfn-signal -e $? '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource ECSAutoScalingGroup '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

  Service:
    Type: "AWS::ECS::Service"
    DependsOn: ALBListener
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      LoadBalancers:
        - ContainerName: wordpress
          ContainerPort: 80
          TargetGroupArn: !Ref ECSTG
      Role: !Ref ECSServiceRole
      TaskDefinition: !Ref ECSTaskDefinition

  ECSServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "elasticloadbalancing:DeregisterInstancesFromLoadBalancer"
                  - "elasticloadbalancing:DeregisterTargets"
                  - "elasticloadbalancing:Describe*"
                  - "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
                  - "elasticloadbalancing:RegisterTargets"
                  - "ec2:Describe*"
                  - "ec2:AuthorizeSecurityGroupIngress"
                Resource: "*"

  ServiceScalingTarget:
    Type: "AWS::ApplicationAutoScaling::ScalableTarget"
    DependsOn: Service
    Properties:
      MaxCapacity: 2
      MinCapacity: 1
      ResourceId: !Join
        - ""
        - - service/
          - !Ref ECSCluster
          - /
          - !GetAtt
            - Service
            - Name
      RoleARN: !GetAtt
        - AutoscalingRole
        - Arn
      ScalableDimension: "ecs:service:DesiredCount"
      ServiceNamespace: ecs
  
  ServiceScalingPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties:
      PolicyName: AStepPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref ServiceScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            ScalingAdjustment: 200
  
  ALB500sAlarmScaleUp:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '10'
      AlarmDescription: Alarm if our ALB generates too many HTTP 500s.
      Period: '60'
      AlarmActions:
        - !Ref ServiceScalingPolicy
      Namespace: AWS/ApplicationELB
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt
            - ECSALB
            - LoadBalancerFullName
      ComparisonOperator: GreaterThanThreshold
      MetricName: HTTPCode_ELB_5XX_Count

  EC2Role:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                  - 'ecs:CreateCluster'
                  - 'ecs:DeregisterContainerInstance'
                  - 'ecs:DiscoverPollEndpoint'
                  - 'ecs:Poll'
                  - 'ecs:RegisterContainerInstance'
                  - 'ecs:StartTelemetrySession'
                  - 'ecs:Submit*'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: "*"

  AutoscalingRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: service-autoscaling
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "application-autoscaling:*"
                  - "cloudwatch:DescribeAlarms"
                  - "cloudwatch:PutMetricAlarm"
                  - "ecs:DescribeServices"
                  - "ecs:UpdateService"
                Resource: "*"

  EC2InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: /
      Roles:
        - !Ref EC2Role

Outputs:
  ECSALBOuput:
    Description: ECS ALB
    Value: !Join
      - ""
      - - "http://"
        - !GetAtt
          - ECSALB
          - DNSName
  taskdef:
    Description: ECS Task Definition
    Value: !Ref ECSTaskDefinition
